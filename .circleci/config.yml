# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  # jobs for building/testing go here
  build:
      docker:
        # specify the version you desire here
        - image: circleci/php:7.1.5-browsers

        # Specify service dependencies here if necessary
        # CircleCI maintains a library of pre-built images
        # documented at https://circleci.com/docs/2.0/circleci-images/
        # - image: circleci/mysql:9.4
      working_directory: ~/tender_bartik
      steps:
        - checkout
        - run: sudo apt install -y libsqlite3-dev zlib1g-dev
        - run: sudo docker-php-ext-install zip
        - run: sudo composer self-update
        # Download and cache dependencies
        - restore_cache:
            keys:
              - composer-v1-{{ checksum "composer.lock" }}
              - composer-v1-
        - run: composer install -n --prefer-dist
        - save_cache:
            key: composer-v1-{{ checksum "composer.lock" }}
            paths:
              - vendor
        - run: touch storage/testing.sqlite
        - run: php artisan migrate --env=testing --database=sqlite_testing --force
        - run: ./vendor/bin/codecept build
        - run: ./vendor/bin/codecept run
  deploy-job:
    docker:
      - image: php:7.2.3-apache-stretch
    working_directory: /tmp/my-project
    steps:
      - checkout
      - add_ssh_keys:  # add key from CircleCI account based on fingerprint
          fingerprints:
            - "48:a0:87:54:ca:75:32:12:c6:9e:a2:77:a4:7a:08:a4"
      - run:
          name: Run Setup Script
          command: bash .circleci/setup-heroku.sh
      - run:
          name: Deploy Master to Heroku
          command: |  # this command is framework-dependent and may vary
            heroku git:remote -a $HEROKU_APP_NAME
            git push --force git@heroku.com:$HEROKU_APP_NAME.git HEAD:refs/heads/master
            heroku run python manage.py deploy
            heroku restart
workflows:
  version: 2
  build-deploy:
    jobs:
      - build-job
      - deploy-jobs:  # only deploy when master successfully builds
          requires:
            - build-job
          filters:
            branches:
              only: master